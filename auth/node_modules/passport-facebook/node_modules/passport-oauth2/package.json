{
  "name": "passport-oauth2",
  "version": "1.1.2",
  "description": "OAuth 2.0 authentication strategy for Passport.",
  "keywords": [
    "passport",
    "auth",
    "authn",
    "authentication",
    "authz",
    "authorization",
    "oauth",
    "oauth2"
  ],
  "author": {
    "name": "Jared Hanson",
    "email": "jaredhanson@gmail.com",
    "url": "http://www.jaredhanson.net/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jaredhanson/passport-oauth2.git"
  },
  "bugs": {
    "url": "http://github.com/jaredhanson/passport-oauth2/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "passport-strategy": "1.x.x",
    "oauth": "0.9.x",
    "uid2": "0.0.x"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x",
    "chai-passport-strategy": "0.2.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js test/**/*.test.js"
  },
  "readme": "# passport-oauth2\n\n[![Build](https://travis-ci.org/jaredhanson/passport-oauth2.png)](https://travis-ci.org/jaredhanson/passport-oauth2)\n[![Coverage](https://coveralls.io/repos/jaredhanson/passport-oauth2/badge.png)](https://coveralls.io/r/jaredhanson/passport-oauth2)\n[![Quality](https://codeclimate.com/github/jaredhanson/passport-oauth2.png)](https://codeclimate.com/github/jaredhanson/passport-oauth2)\n[![Dependencies](https://david-dm.org/jaredhanson/passport-oauth2.png)](https://david-dm.org/jaredhanson/passport-oauth2)\n[![Tips](http://img.shields.io/gittip/jaredhanson.png)](https://www.gittip.com/jaredhanson/)\n\nGeneral-purpose OAuth 2.0 authentication strategy for [Passport](http://passportjs.org/).\n\nThis module lets you authenticate using OAuth 2.0 in your Node.js applications.\nBy plugging into Passport, OAuth 2.0 authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\nNote that this strategy provides generic OAuth 2.0 support.  In many cases, a\nprovider-specific strategy can be used instead, which cuts down on unnecessary\nconfiguration, and accommodates any provider-specific quirks.  See the\n[list](https://github.com/jaredhanson/passport/wiki/Strategies) for supported\nproviders.\n\nDevelopers who need to implement authentication against an OAuth 2.0 provider\nthat is not already supported are encouraged to sub-class this strategy.  If you\nchoose to open source the new provider-specific strategy, please add it to the\nlist so other people can find it.\n\n## Install\n\n    $ npm install passport-oauth2\n\n## Usage\n\n#### Configure Strategy\n\nThe OAuth 2.0 authentication strategy authenticates users using a third-party\naccount and OAuth 2.0 tokens.  The provider's OAuth 2.0 endpoints, as well as\nthe client identifer and secret, are specified as options.  The strategy\nrequires a `verify` callback, which receives an access token and profile,\nand calls `done` providing a user.\n\n    passport.use(new OAuth2Strategy({\n        authorizationURL: 'https://www.example.com/oauth2/authorize',\n        tokenURL: 'https://www.example.com/oauth2/token',\n        clientID: EXAMPLE_CLIENT_ID,\n        clientSecret: EXAMPLE_CLIENT_SECRET,\n        callbackURL: \"http://localhost:3000/auth/example/callback\"\n      },\n      function(accessToken, refreshToken, profile, done) {\n        User.findOrCreate({ exampleId: profile.id }, function (err, user) {\n          return done(err, user);\n        });\n      }\n    ));\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'oauth2'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n    app.get('/auth/example',\n      passport.authenticate('oauth2'));\n\n    app.get('/auth/example/callback',\n      passport.authenticate('oauth2', { failureRedirect: '/login' }),\n      function(req, res) {\n        // Successful authentication, redirect home.\n        res.redirect('/');\n      });\n\n## Related Modules\n\n- [passport-oauth1](https://github.com/jaredhanson/passport-oauth1) — OAuth 1.0 authentication strategy\n- [passport-http-bearer](https://github.com/jaredhanson/passport-http-bearer) — Bearer token authentication strategy for APIs\n- [OAuth2orize](https://github.com/jaredhanson/oauth2orize) — OAuth 2.0 authorization server toolkit\n\n## Tests\n\n    $ npm install\n    $ npm test\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2011-2014 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jaredhanson/passport-oauth2",
  "_id": "passport-oauth2@1.1.2",
  "dist": {
    "shasum": "00dcdbb28a81ab3173022d5c78b9cea43ded2aa3"
  },
  "_from": "passport-oauth2@1.x.x",
  "_resolved": "https://registry.npmjs.org/passport-oauth2/-/passport-oauth2-1.1.2.tgz"
}
