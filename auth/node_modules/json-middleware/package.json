{
  "name": "json-middleware",
  "description": "Middleare component to send responses as JSON when requested as JSON",
  "version": "1.0.2",
  "author": {
    "name": "Steve King",
    "email": "steve@mydev.co"
  },
  "contributors": [
    {
      "name": "Steve King",
      "email": "steve@mydev.co"
    }
  ],
  "dependencies": {},
  "devDependencies": {},
  "keywords": [
    "json",
    "middleware",
    "filter",
    "connect",
    "express"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/steveukx/json-middleware"
  },
  "main": "src/json-middleware",
  "bin": {},
  "scripts": {},
  "config": {},
  "engines": {
    "node": ">= 0.4.1"
  },
  "readme": "# About\n\nAutomatically send model data as JSON instead of passing to the view renderer when the user agent sends an `Accept`\ntype of `application/json` or adds a `json` parameter to the query string.\n\n# Installation\n\nInstalling through [npm](http://npmjs.org) is as easy as:\n\n    npm install json-middleware\n\n# Usage\n\nTo plug the middleware into a Connect or [Express](http://expressjs.com/) server:\n\n    var app = require('express')();\n    app.use(require('json-middleware').middleware());\n\nWhen the middleware component runs, an `isJson` property is attached to the request. The value of the `isJson` property\nwill either be `true` when the `Accept` header is set to `application/json`, or it will be set to whatever the `json`\nquery string parameter value was.\n\nTo send a response as JSON instead of the usual view renderer, just call `res.render` as normal:\n\n    app.get('/', function(req, res) {\n       res.render(\"index\", myDataObject);\n    });\n\nIn this case, when the response is to be rendered as JSON, `myDataObject` will be sent as a JSON response instead of\nbeing passed to whatever view engine has been set up (eg: [hogan-middleware](git://github.com/steveukx/hogan-middleware))\n\n# Example\n\n    app.use(require('json-middleware').middleware());\n\n    app.get('/', function(req, res) {\n       console.log(req.isJson);\n       res.render(\"index\", req.session); // render the index view with all data from the session\n    });\n\nWhen accessing `/`, the `index` view is rendered with data held in the `req.session` object. Accessing `/?json=on`\nresult in the `req.session` object being sent to the client as JSON and the console will print `on`.\n\nAccessing `/` with the `Accept` request header set to `application/json` will result in the console printing `true`\nand the `req.session` object being sent to the client as JSON.\n\n# Note\n\nOnly the `req.render` function is altered, all other utilities for responding to requests (eg: `req.send`) are left\nuntouched.\n\n\n# License\n\nReleased under the [MIT](http://opensource.org/licenses/MIT) license. In short usage is free for any purpose, with the\nusual lack of warranties either explicit or implied.\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/steveukx/json-middleware/issues"
  },
  "homepage": "https://github.com/steveukx/json-middleware",
  "_id": "json-middleware@1.0.2",
  "dist": {
    "shasum": "6461ace9d8a430e31ab4499eb90e1157705351dd"
  },
  "_from": "json-middleware@",
  "_resolved": "https://registry.npmjs.org/json-middleware/-/json-middleware-1.0.2.tgz"
}
